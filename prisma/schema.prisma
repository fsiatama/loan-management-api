// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  keepRelationScalarFields = "true"
  schemaId = "blue-phoenix-schema-id"
  includeRequiredFields = "true"
  persistOriginalType = "true"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Address {
  street String
  city   String
  state  String
  zip    String
  phone  String
  phone2 String?
  phone3 String?
}

enum ConceptEnumType {
  DEBIT
  CREDIT
}

model User {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  email       String        @unique
  password    String
  name        String
  borrowers   Borrower[]
  Loan        Loan[]
  Transaction Transaction[]
  Term        Term[]
}

model Borrower {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  email                       String   @unique
  firstName                   String
  lastName                    String
  address                     Address
  uinsert                     User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId                   String   @db.ObjectId
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  Loan_Loan_borrowerPrincipal Loan[]   @relation("Loan_borrowerPrincipal")
  Loan_Loan_coBorrower        Loan[]   @relation("Loan_coBorrower")
}

model Loan {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  uinsert      User          @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  borrower1    Borrower      @relation("Loan_borrowerPrincipal", fields: [borrower1Id], references: [id], onDelete: Restrict)
  borrower2    Borrower?     @relation("Loan_coBorrower", fields: [borrower2Id], references: [id], onDelete: Restrict)
  amount       Float
  startDate    DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  terms        Term[]
  balance      Balance?
  uinsertId    String        @db.ObjectId
  borrower1Id  String        @db.ObjectId
  borrower2Id  String?       @db.ObjectId
}

model Transaction {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  date               DateTime
  amount             Float
  description        String?
  loan               Loan     @relation(fields: [loanId], references: [id], onDelete: Restrict)
  loanId             String   @db.ObjectId
  uinsert            User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId          String   @db.ObjectId
  createdAt          DateTime @default(now())
  concept            Concept  @relation(fields: [conceptId], references: [id], onDelete: Restrict)
  conceptId          String   @db.ObjectId
}

model Concept {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String          @unique
  isToThirdParty  Boolean         @default(false)
  conceptType     ConceptEnumType @default(CREDIT)
  createdAt       DateTime        @default(now())
  transactions    Transaction[]
  paymentAscConcepts TermPaymentAssociatedConcepts[]
}

model Term {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  months             Int
  monthlyRate        Float
  annualInterestRate Float
  monthlyAmount      Float
  latePaymentFee     Float
  beginToApplyDate   DateTime
  cutOffDay          Int
  paymentDay         Int
  uinsert            User     @relation(fields: [uinsertId], references: [id], onDelete: Restrict)
  uinsertId          String   @db.ObjectId
  createdAt          DateTime @default(now())
  loan               Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId             String   @db.ObjectId
  paymentAscConcepts TermPaymentAssociatedConcepts[]
}

model TermPaymentAssociatedConcepts {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  concept    Concept  @relation(fields: [conceptId], references: [id], onDelete: Restrict)
  conceptId  String   @db.ObjectId
  term       Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
  termId     String   @db.ObjectId
}

model Balance {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  amountPaid         Float
  amountToPrincipal  Float
  amountToInterest   Float
  amountInArrears    Float
  amountLateFee      Float
  latePayments       Int
  lastPaymentDate    DateTime?
  installment        String
  updatedAt          DateTime @updatedAt
  loan               Loan     @relation(fields: [loanId], references: [id], onDelete: Restrict)
  loanId             String   @db.ObjectId  @unique
}
